assignment_title: ""
total_points: 100
passing_score: 60

criteria:
  - name: "Correctness / Functionality"
    weight: 40  # Percentage of total grade
    description: "Does the code produce correct output?"
    levels:
      excellent:
        points: 40
        description: "Works correctly for all test cases including edge cases. Produces expected output for normal inputs, empty inputs, and boundary conditions."
      good:
        points: 30
        description: "Works correctly for standard test cases. May have minor issues with 1-2 edge cases but core functionality is sound."
      fair:
        points: 20
        description: "Works for simple cases but fails on several edge cases or complex inputs. Core logic is present but incomplete."
      poor:
        points: 10
        description: "Significant errors prevent correct output. May not run or produces incorrect results for most inputs."

  - name: "Code Quality / Readability"
    weight: 25
    description: "Is the code clear, well-structured, and maintainable?"
    levels:
      excellent:
        points: 25
        description: "Clear, descriptive variable and function names. Logical organization. Well-commented where helpful. Includes docstrings."
      good:
        points: 19
        description: "Generally readable with mostly clear names. Minor structure issues. Has docstring but comments could be improved."
      fair:
        points: 13
        description: "Some confusing names (x, y) or unclear structure. Missing docstring or insufficient comments."
      poor:
        points: 6
        description: "Poor naming throughout. Confusing logic flow. No documentation. Very hard to understand."

  - name: "Efficiency / Algorithm Choice"
    weight: 20
    description: "Does the solution use appropriate algorithms and data structures?"
    levels:
      excellent:
        points: 20
        description: "Optimal approach with appropriate time/space complexity. Uses best data structures for the problem."
      good:
        points: 15
        description: "Reasonable approach with minor inefficiencies. Could be improved but acceptable for problem scale."
      fair:
        points: 10
        description: "Inefficient approach (e.g., nested loops where hash table would work). Noticeably slow for larger inputs."
      poor:
        points: 5
        description: "Very inefficient algorithm or inappropriate data structures. Would not scale."

  - name: "Error Handling"
    weight: 10
    description: "Does the code handle edge cases and invalid inputs?"
    levels:
      excellent:
        points: 10
        description: "Handles all edge cases: empty inputs, None, invalid types, boundary conditions. Fails gracefully with clear messages."
      good:
        points: 7
        description: "Handles most common edge cases (empty inputs, basic validation). May miss 1-2 edge cases."
      fair:
        points: 5
        description: "Minimal error handling. Handles one or two obvious cases but crashes on others."
      poor:
        points: 2
        description: "No error handling. Crashes or produces incorrect results on edge cases."

  - name: "Python Style / Best Practices"
    weight: 5
    description: "Does the code follow Python conventions and best practices?"
    levels:
      excellent:
        points: 5
        description: "Follows PEP 8 conventions. Uses Pythonic idioms (list comprehensions, context managers, etc.). Appropriate use of built-ins."
      good:
        points: 4
        description: "Generally follows Python conventions. Minor style issues or missed opportunities for Pythonic patterns."
      fair:
        points: 3
        description: "Several style violations. Non-Pythonic code (e.g., range(len()) instead of enumerate)."
      poor:
        points: 1
        description: "Ignores Python conventions. Code looks like it was translated from another language."

feedback_template: |
  Criterion: Score (Level)
  [Specific feedback with examples from student work]
  [Suggestions for improvement]
