# Learning Objective Template

# Example structure for a learning objective aligned with Bloom's taxonomy

---

topic: "Topic or Concept Name"
# e.g., "Python List Comprehensions", "Object-Oriented Design", "Async/Await"

objectives:
  - id: "LO-001"
    statement: "Action verb + specific outcome"
    # Use active verbs from Bloom's level you're targeting
    # Example: "Implement a list comprehension to filter and transform data"
    # Example: "Explain how inheritance enables code reuse"

    blooms_level: "Apply"
    # Options: Remember, Understand, Apply, Analyze, Evaluate, Create

    context: "The specific context or domain for this objective"
    # Example: "Given a list of dictionaries containing student records..."
    # Example: "In the context of a REST API design..."

    prerequisites:
      - "Understand Python list syntax and indexing"
      - "Know what list comprehension syntax is"
      - "Can write basic for loops"
    # These should be at Remember/Understand level

    assessment_method: "How this objective will be assessed"
    # Example: "Write a function using list comprehension to solve provided problem"
    # Example: "Code review and explain design choices"

    success_criteria:
      - "Code executes without errors"
      - "Output matches expected results"
      - "Uses list comprehension (not a for loop)"
      - "Code is readable with clear variable names"

    learning_duration: "Estimated time to master this objective"
    # Example: "30 minutes"

    notes: "Additional context or teaching tips"
    # Example: "Start with simple filters before combining with transformations"
    # Example: "Common misconception: list comprehension is always better than loops"

  - id: "LO-002"
    statement: "Compare list comprehensions with traditional for loops in terms of readability and performance"
    blooms_level: "Analyze"
    context: "When choosing between approaches for data transformation"
    prerequisites:
      - "Can implement basic list comprehensions"
      - "Understand time complexity concepts at high level"
      - "Know what readability means in code"
    assessment_method: "Analysis essay: Compare two implementations and justify choice"
    success_criteria:
      - "Identifies both advantages and disadvantages of each approach"
      - "Considers readability, performance, and code clarity"
      - "Justification is based on specific criteria (not just opinion)"
    learning_duration: "20 minutes"

  - id: "LO-003"
    statement: "Design a data processing pipeline using list comprehensions and built-in functions for a specific use case"
    blooms_level: "Create"
    context: "Real-world data processing task"
    prerequisites:
      - "Can write list comprehensions fluently"
      - "Know built-in functions (map, filter, sorted, etc.)"
      - "Understand function composition"
    assessment_method: "Create implementation + design documentation"
    success_criteria:
      - "Solution correctly processes the data"
      - "Uses appropriate comprehensions and functions"
      - "Code is well-documented with comments"
      - "Handles edge cases appropriately"
    learning_duration: "60-90 minutes"
