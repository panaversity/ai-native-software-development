# Skills Proficiency Mapping Template
# Use this template when mapping skills to lessons with CEFR proficiency levels
# Based on 40 years of CEFR research + Bloom's Taxonomy + DigComp 2.1

---
# LESSON INFORMATION
lesson_id: "Ch30-L1"  # Chapter-Lesson identifier
lesson_title: "Vague Code and the AI Partner Problem"
chapter: 30
lesson_number: 1
duration_hours: 2.5
target_audience: "Beginner (Parts 1-3 complexity tier)"

# SKILLS BEING TAUGHT IN THIS LESSON
skills:
  - name: "Problem Identification"
    proficiency_level: "A2"              # CEFR level: A1-C2
    category: "Conceptual"               # Technical, Conceptual, or Soft
    bloom_level: "Understand"            # Remember, Understand, Apply, Analyze, Evaluate, Create
    digcomp_area: "Information Literacy" # See DigComp 2.1

    definition: |
      Student can identify vagueness and ambiguity in requirements
      and explain why vagueness causes problems with AI agents.

    measurable_at_this_level: |
      Student demonstrates proficiency by:
      - Identifying 3+ types of ambiguity in example specifications
      - Explaining consequences of vague requirements
      - Proposing one way to clarify a vague requirement

    assessment_method: "Identification + explanation (short answer)"

    cognitive_load_new_concepts: 1
    new_concepts:
      - "Vague requirements and their impact on AI"

    # How this skill fits in Part 5 progression
    skill_progression:
      chapter_30:
        lesson: 1
        level: "A2"
        focus: "Identify problems"
      chapter_31:
        lesson: 7
        level: "A2"
        focus: "Review and apply"
      chapter_32:
        lesson: 3
        level: "B1"
        focus: "Analyze in organizational context"

    # Prerequisites: What must be learned before this?
    prerequisites: []  # This is foundation lesson - no prerequisites

    # Dependencies: What skills depend on this one?
    dependents:
      - "Specification Writing (requires understanding of vagueness problem)"
      - "Requirements Clarity (builds on identifying vagueness)"

    # Real-world application
    real_world_application: |
      When requesting features from AI agents (Claude Code, GitHub Copilot),
      users who can identify vagueness in their own descriptions get
      much better results. This is critical skill for using AI effectively.

  - name: "AI Communication Clarity"
    proficiency_level: "A2"
    category: "Soft"
    bloom_level: "Understand"
    digcomp_area: "Communication & Collaboration"

    definition: |
      Student can explain why precision and clarity matter when
      communicating with AI agents, and recognize the difference
      between human communication and machine-executable instructions.

    measurable_at_this_level: |
      Student demonstrates proficiency by:
      - Explaining why AI agents can't "infer" like humans
      - Describing what happens when specifications are vague
      - Distinguishing between "what humans understand" vs. "what machines can execute"

    assessment_method: "Explanation (short answer essay)"

    cognitive_load_new_concepts: 1
    new_concepts:
      - "AI literal-mindedness and why it matters"

    skill_progression:
      chapter_30:
        lesson: 1
        level: "A2"
        focus: "Understand AI limitations"
      chapter_31:
        lesson: 3
        level: "B1"
        focus: "Apply clarity principles to spec writing"
      chapter_32:
        lesson: 2
        level: "B1"
        focus: "Communicate specs to team and AI agents"

    prerequisites: []
    dependents:
      - "Specification Writing (requires understanding AI needs)"
      - "Team Coordination (extends to human-AI teams)"

  - name: "Specification Understanding"
    proficiency_level: "A1"
    category: "Conceptual"
    bloom_level: "Remember"
    digcomp_area: "Information Literacy"

    definition: |
      Student can recognize and identify the key components of
      a specification, and understand what each component addresses.

    measurable_at_this_level: |
      Student demonstrates proficiency by:
      - Identifying 5 core components in a given specification
      - Matching spec components to what they address
      - Recognizing when a specification is incomplete

    assessment_method: "Recognition + identification (multiple choice, matching)"

    cognitive_load_new_concepts: 2
    new_concepts:
      - "What is a specification (definition)"
      - "Core components of specifications"

    skill_progression:
      chapter_30:
        lesson: 1
        level: "A1"
        focus: "Recognize specs and components"
      chapter_30:
        lesson: 3
        level: "A2"
        focus: "Understand how to write each component"
      chapter_31:
        lesson: 3
        level: "B1"
        focus: "Apply component knowledge to clarity and testability"

    prerequisites: []
    dependents:
      - "ALL specification-related skills depend on this foundation"

# PROFICIENCY PROGRESSION
proficiency_progression: |
  This lesson moves students from A1 (recognition) to A2 (understanding).

  Stage 1: Introduction (15 min)
  - What is a specification? (A1 introduction)
  - Show worked example of clear vs. vague spec
  - Cognitive load: 0-1 new concepts

  Stage 2: Recognition Practice (30 min)
  - Identify specifications in examples
  - Identify components in specifications
  - Cognitive load: 1-2 new concepts (spec definition, components)

  Stage 3: Explanation (30 min)
  - Explain why vagueness is a problem
  - Explain what AI needs (clarity)
  - Cognitive load: 1 new concept (why clarity matters)

  Stage 4: Reflection (30 min)
  - Personal experience: When did vagueness cause problems?
  - Why does this matter for you?
  - Cognitive load: 0 new concepts (integration)

# COGNITIVE LOAD ASSESSMENT
total_cognitive_load: 4
breakdown:
  "Vague requirements concept": 1
  "AI literal-mindedness concept": 1
  "Specification definition": 1
  "Core components concept": 1

assessment: |
  Total = 4 new concepts (within A2 limit of 7) ✓
  Appropriate for 2.5-hour lesson ✓
  All concepts introduced, practiced, integrated ✓

# LEARNING OBJECTIVES (with proficiency levels)
learning_objectives:
  - objective: "Identify vagueness and ambiguity in requirements"
    proficiency_level: "A2"
    bloom_level: "Understand"
    assessment_type: "Identification task with explanation"

  - objective: "Explain why vague specifications fail with AI agents"
    proficiency_level: "A2"
    bloom_level: "Understand"
    assessment_type: "Short-answer explanation"

  - objective: "Recognize the 5 core components of specifications"
    proficiency_level: "A1"
    bloom_level: "Remember"
    assessment_type: "Identification (multiple choice, matching)"

# ASSESSMENT RUBRIC
assessment_rubric:
  criterion_1:
    name: "Identify Vagueness"
    exceeds_b2: "Systematically analyzes requirements for multiple types of ambiguity; explains consequences at strategic level"
    meets_a2: "Identifies 3+ types of vagueness in example; explains basic consequences"
    developing_a1: "Identifies 1-2 types of vagueness; explanation is incomplete"
    not_yet: "Cannot identify vagueness; no understanding of concept"

  criterion_2:
    name: "Understand AI Communication Needs"
    exceeds_b2: "Explains sophisticated AI limitations; applies to novel contexts"
    meets_a2: "Explains why AI needs precise specs; contrasts with human communication"
    developing_a1: "Recognizes AI is different from humans; explanation is basic"
    not_yet: "No understanding of AI limitations"

  criterion_3:
    name: "Recognize Specification Components"
    exceeds_b2: "Understands purpose of each component; explains how they work together"
    meets_a1: "Can identify 5 components in given spec"
    developing: "Can identify 3-4 components with hints"
    not_yet: "Cannot identify specification components"

# INTERDEPENDENCIES & PREREQUISITES
prerequisites_satisfied: true
prerequisites_notes: |
  This is foundation lesson - no prior SDD knowledge required.
  Assumes students understand basic software concepts (what is code, what is a system).

# DIFFERENTIATION & EXTENSIONS
for_struggling_students: |
  Provide:
  - Simplified specification examples (2 components instead of 5)
  - Vagueness patterns (common types of ambiguity)
  - Guided practice with checklist
  - Extra worked examples

for_advanced_students: |
  Extend with:
  - Real specification analysis (from open-source projects)
  - Analyze different spec styles (technical, business, user-focused)
  - Predict consequences of specific types of vagueness
  - Design improved version of vague specification

# TIMING & LOGISTICS
total_lesson_duration: 2.5
time_allocation:
  introduction_worked_example: 15      # min
  recognition_practice: 30
  explanation_discussion: 30
  reflection_application: 30
  assessment: 15
  slack_time: 30

materials_needed:
  - Specification examples (clear and vague)
  - Specification components reference card
  - Practice problems with vague specs
  - Worked examples of AI failures from vagueness

# CULTURAL & ACCESSIBILITY NOTES
accessibility_considerations: |
  - Provide specification examples in multiple formats (text, visual diagram)
  - Use relatable real-world examples (not just abstract)
  - Ensure clarity for non-native English speakers
  - Offer multiple modalities for participation (discussion, writing, visual)

# ALIGNMENT TO RESEARCH
research_foundation:
  - CEFR: A1-A2 proficiency levels validated across 40+ languages
  - Bloom's Taxonomy: Remember-Understand levels (1956 original, 2001 revision)
  - DigComp 2.1: Digital competence framework (EU, 2022)
  - Cognitive Load Theory: Max 5-7 new concepts for A2 level
  - Scaffolding Research: Worked examples → guided practice → independence

# NOTES FOR EDUCATORS
implementation_notes: |
  - This is foundation lesson - sets up all subsequent SDD content
  - Key insight: Help students EXPERIENCE the problem before proposing solution
  - Don't teach SDD as abstract framework; teach as response to real problem
  - Leave students frustrated by vague specs - then offer SDD as solution
  - This emotional engagement creates motivation for rest of Part 5

# VALIDATION CHECKLIST
validation:
  - proficiency_level_appropriate: true
  - cognitive_load_within_limits: true
  - prerequisites_satisfied: true
  - assessment_matches_objectives: true
  - scaffolding_appropriate: true
  - time_realistic: true
  - research_grounded: true

# NEXT LESSON PREPARATION
transitions_to:
  lesson: "Ch30-L2"
  title: "Ask Your Companion: What Is SDD?"
  connection: "Now that students understand THE PROBLEM, they're ready to learn THE SOLUTION"
  prerequisite_skills: []  # All skills from L1 are sufficient

---
# METADATA
version: 1.0
created_date: 2025-11-01
last_updated: 2025-11-01
author: "[Your Name]"
status: "template"
notes: |
  This template provides comprehensive skills proficiency mapping aligned to:
  - CEFR (40+ years of proficiency research)
  - Bloom's Taxonomy (70+ years of cognitive research)
  - DigComp 2.1 (latest digital competence framework)
  - Cognitive Load Theory (learning science)
  - Scaffolding Research (effective instruction)

  Use when:
  - Planning lessons with proficiency targets
  - Validating lesson content matches proficiency level
  - Designing assessments for proficiency levels
  - Creating differentiation plans
  - Mapping skills across chapters
